!function(){"use strict";function e(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class t{constructor(t,s){e(this,"_hasInvalidInput",(e=>e.some((e=>!e.validity.valid)))),e(this,"_toggleButtonState",(()=>{this._hasInvalidInput(this._inputList)?(this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.setAttribute("disabled",!0),this._buttonElement.setAttribute("style","cursor:not-allowed")):(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.removeAttribute("disabled"),this._buttonElement.setAttribute("style","cursor: pointer"))})),this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._formElement=s,this._inputList=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._buttonElement=this._formElement.querySelector(this._submitButtonSelector)}_showInputError(e,t){const s=this._formElement.querySelector("#".concat(e.id,"-error"));s.textContent=t,s.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector("#".concat(e.id,"-error"));t.classList.remove(this._errorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_setInputsEventListeners(){this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}resetValidation(){this._inputList.forEach((e=>{this._hideInputError(e)})),this._toggleButtonState()}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setInputsEventListeners()}}class s{constructor(e){var t,s;s=e=>{"Escape"===e.key&&this.close()},(t="_handleEscClose")in this?Object.defineProperty(this,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):this[t]=s,this._popupElement=document.querySelector(e)}open(){this._popupElement.classList.add("popup_active"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("popup_active"),document.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._popupElement.addEventListener("mousedown",(e=>{(e.target.classList.contains("popup_active")||e.target.classList.contains("popup__exit-icon"))&&this.close()}))}}class i extends s{constructor(e,t){super(e),this._formPopupElement=this._popupElement.querySelector(".popup__form"),this._submitBtn=this._formPopupElement.querySelector(".popup__form-submit-btn"),this._inputList=this._formPopupElement.querySelectorAll(".popup__form-input"),this._submitHandler=t}getInputValues(){const e={};return this._inputList.forEach((t=>{const s=t.name;e[s]=t.value})),e}setEventListeners(){super.setEventListeners(),this._formPopupElement.addEventListener("submit",(e=>{e.preventDefault(),this._renderLoading(),this._submitHandler()}))}_renderLoading(){this._submitBtn.diabled=!0,this._submitBtn.textContent="Saving...",this._submitBtn.setAttribute("style","cursor:not-allowed")}getBtn(){return this._submitBtn}close(){super.close(),this._formPopupElement.reset()}}const n=".elements__list",r=".profile__name",o=".profile__role",l=(document.querySelector(n),document.querySelector(".profile__edit-btn")),a=document.querySelector(".profile__add-btn"),c=document.querySelector("#inputName"),h=document.querySelector("#inputRole"),u=(document.querySelector(r),document.querySelector(o),document.querySelector(".elements__likesNumber"),document.querySelector(".profile__imageContainer"));document.querySelector(".profile__image");class _{constructor(e,t,s){let{likedBolVal:i,ownerId:n,text:r,image:o,id:l,likesNum:a,handleCardClick:c,openDeleteConfirmPopUp:h,handleLike:u,handleDeleteLike:_}=e;this._text=r,this._image=o,this._templateSelector=t,this._handleCardClick=c,this._openDeleteConfirmPopUp=h,this._element=this._getTemplate(),this._imageItem=this._element.querySelector(".elements__image"),this._textItem=this._element.querySelector(".elements__text"),this._deleteItem=this._element.querySelector(".elements__delete-icon"),this._likeNumberItem=this._element.querySelector(".elements__likesNumber"),this._likeItem=this._element.querySelector(".elements__like-btn"),this._id=l,this._userId=s,this._ownerId=n,this._likesNum=a,this._likedBolVal=i,this._handleLike=u,this._handleDeleteLike=_}_getTemplate(){return document.querySelector(this._templateSelector).content.querySelector(".elements__element").cloneNode(!0)}generateCard(){return this._imageItem.src=this._image,this._textItem.textContent=this._text,this._imageItem.alt="view of ".concat(this._text),this._likeNumberItem.textContent=this._likesNum,this.setEventListeners(),this._likedBolVal&&this.toggleLikeButton(),this._userId!==this._ownerId&&this._deleteItem.setAttribute("style","display:none"),this._element}setEventListeners(){this._imageItem.addEventListener("click",(()=>{this._handleCardClick()})),this._likeItem.addEventListener("click",(()=>{this._likeItem.classList.contains("elements__svg-heart_liked")?this._handleDeleteLike(this):this._handleLike(this)})),this._deleteItem.addEventListener("click",(()=>{this.openDeleteConfirmPopUp()}))}openDeleteConfirmPopUp(){this._openDeleteConfirmPopUp(this._id)}deleteDomCard(){this._element.remove()}getId(){return this._id}toggleLikeButton(){this._likeItem.classList.toggle("elements__svg-heart_liked")}updateLikes(e){this._likeNumberItem.textContent=e}}const d=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}getInitialCards(){return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers}).then(this._checkResponse)}postNewCard(e,t){return fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})}).then(this._checkResponse)}confirmDelete(e){return fetch("".concat(this._baseUrl,"/cards/").concat(e),{method:"DELETE",headers:this._headers}).then(this._checkResponse)}deleteLike(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"DELETE",headers:this._headers}).then(this._checkResponse)}likeCard(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"PUT",headers:this._headers}).then(this._checkResponse)}getUserInfo(){return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers}).then(this._checkResponse)}editUserInfo(e){let{form__name:t,form__role:s}=e;return fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:s})}).then(this._checkResponse)}editAvatarImage(e){return fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkResponse)}_checkResponse(e){return e.ok?e.json():Promise.reject("Error ".concat(e.status))}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"d117ca4c-01ef-4f19-abee-387b4e32e69d","Content-Type":"application/json"}}),m=new class{constructor(e,t){let{data:s,renderer:i}=e;this._container=document.querySelector(t),this._items=s,this._renderer=i}renderer(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({data:[],renderer:e=>{m.addItem(cardRenderer(e))}},n),p=new i("#addImage",(function(){const e=p.getInputValues(),t=e.form__title,s=e.form__imageLink,i={};i.name=t,i.link=s,d.postNewCard(t,s).then((e=>{i.ownerId=e.owner._id,i._id=e._id,i.likes=e.likes,m.addItem(L(i)),p.close()})).catch(console.log).finally((()=>{const e=p.getBtn();e.textContent="Create",e.setAttribute("style","cursor:pointer")}))})),f=new i("#editProfileImage",(function(){const e=f.getInputValues().form__imageLink;d.editAvatarImage(e).then((e=>{f.close(),v.setUserInfo(e)})).catch((e=>{console.log(e)})).finally((()=>{const e=f.getBtn();e.textContent="Save",e.setAttribute("style","cursor:pointer")}))})),g=new i("#editProfile",(function(){const e=g.getInputValues();d.editUserInfo(e).then((e=>{g.close(),v.setUserInfo(e)})).catch(console.log).finally((()=>{const e=g.getBtn();e.textContent="Save",e.setAttribute("style","cursor:pointer")}))})),b=new class extends s{constructor(e){super(e),this._formPopupElement=this._popupElement.querySelector(".popup__form")}deleteAction(e){this._submitHandler=e}setEventListeners(){super.setEventListeners(),this._formPopupElement.addEventListener("submit",(e=>{e.preventDefault(),this._submitHandler()}))}}("#confirmDelete"),E=new class extends s{constructor(e){var t,s;super(e),s=(e,t)=>{this._imageFile.src=e,this._imageText.textContent=t,this._imageFile.alt="view of ".concat(t),super.open()},(t="open")in this?Object.defineProperty(this,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):this.open=s,this._imageFile=this._popupElement.querySelector(".popup__imagePopUp"),this._imageText=this._popupElement.querySelector(".popup__imagePopUp-text")}}("#imagePopUp"),v=new class{constructor(e){let{nameSelector:t,roleSelector:s,avatarSelector:i,userId:n}=e;this._profileName=document.querySelector(t),this._profileRole=document.querySelector(s),this._avatarImage=document.querySelector(i)}getUserInfo(){const e={};return e.name=this._profileName.textContent,e.role=this._profileRole.textContent,e}setUserInfo(e){this._profileName.textContent=e.name,this._profileRole.textContent=e.about,this._avatarImage.src=e.avatar}}({nameSelector:r,roleSelector:o,avatarSelector:".profile__image"}),k={};var I;I={inputSelector:".popup__form-input",submitButtonSelector:".popup__form-submit-btn",inactiveButtonClass:"popup__form-submit-btn_inactive",inputErrorClass:"popup__form-errorMsg",errorClass:"popup__form-errorMsg_active",formSelector:".popup__form"},Array.from(document.querySelectorAll(I.formSelector)).forEach((e=>{const s=new t(I,e),i=e.getAttribute("name");k[i]=s,s.enableValidation()})),g.setEventListeners(),p.setEventListeners(),f.setEventListeners(),b.setEventListeners(),E.setEventListeners();const L=e=>{const t=e.ownerId?e.ownerId:e.owner._id,s=e.name,i=e.link;let n=e.likes.length;const r=e._id;let o=!1;e.likes.forEach((e=>{if(e._id===y)return o=!0,o}));const l=new _({likedBolVal:o,ownerId:t,text:s,image:i,id:r,likesNum:n,handleCardClick:()=>{(e=>{e.open(i,s)})(E)},openDeleteConfirmPopUp:e=>{b.open(),b.deleteAction((()=>{d.confirmDelete(e).then((e=>{l.deleteDomCard(),b.close()})).catch(console.log)}))},handleLike:e=>{!function(e){d.likeCard(e.getId()).then((t=>{e.updateLikes(t.likes.length),e.toggleLikeButton()})).catch((e=>{console.log(e)}))}(e)},handleDeleteLike:e=>{!function(e){d.deleteLike(e.getId()).then((t=>{e.updateLikes(t.likes.length),e.toggleLikeButton()})).catch((e=>{console.log(e)}))}(e)}},"#card-template",y);return l.generateCard()};let y;Promise.all([d.getUserInfo(),d.getInitialCards()]).then((e=>{let[t,s]=e;y=t._id,Array.from(s).forEach((e=>{m.addItem(L(e))})),console.log(t),v.setUserInfo(t)})).catch(console.log),l.addEventListener("click",(()=>{const e=v.getUserInfo();c.setAttribute("value",e.name),h.setAttribute("value",e.role),k.edit__form.resetValidation(),g.open()})),a.addEventListener("click",(()=>{k.add__form.resetValidation(),p.open()})),u.addEventListener("click",(()=>{k.editProfileImage__form.resetValidation(),f.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,