!function(){"use strict";function e(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class t{constructor(t,s){e(this,"_hasInvalidInput",(e=>e.some((e=>!e.validity.valid)))),e(this,"_toggleButtonState",(()=>{this._hasInvalidInput(this._inputList)?(this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.setAttribute("disabled",!0)):(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.removeAttribute("disabled"))})),this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._formElement=s,this._inputList=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._buttonElement=this._formElement.querySelector(this._submitButtonSelector)}_showInputError(e,t){const s=this._formElement.querySelector("#".concat(e.id,"-error"));s.textContent=t,s.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector("#".concat(e.id,"-error"));t.classList.remove(this._errorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_setInputsEventListeners(){this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}resetValidation(){this._inputList.forEach((e=>{this._hideInputError(e)})),this._toggleButtonState()}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setInputsEventListeners()}}class s{constructor(e){var t,s;s=e=>{"Escape"===e.key&&this.close()},(t="_handleEscClose")in this?Object.defineProperty(this,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):this[t]=s,this._popupElement=document.querySelector(e)}open(){this._popupElement.classList.add("popup_active"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("popup_active"),document.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._popupElement.addEventListener("mousedown",(e=>{(e.target.classList.contains("popup_active")||e.target.classList.contains("popup__exit-icon"))&&this.close()}))}}class i extends s{constructor(e,t){super(e),this._formPopupElement=this._popupElement.querySelector(".popup__form"),this._submitBtn=this._formPopupElement.querySelector(".popup__form-submit-btn"),this._inputList=this._formPopupElement.querySelectorAll(".popup__form-input"),this._submitHandler=t}getInputValues(){const e={};return this._inputList.forEach((t=>{const s=t.name;e[s]=t.value})),e}setEventListeners(){super.setEventListeners(),this._formPopupElement.addEventListener("submit",(e=>{e.preventDefault();const t=this._submitBtn.textContent;this._submitBtn.diabled=!0,this._submitBtn.textContent="Saving...",setTimeout((()=>{this._submitHandler(),this.close(),this._submitBtn.textContent=t}),1300)}))}close(){super.close(),this._formPopupElement.reset()}}const r=".elements__list",n=".profile__name",o=".profile__role",l=(document.querySelector(r),document.querySelector(".profile__edit-btn")),a=document.querySelector(".profile__add-btn"),c=document.querySelector("#inputName"),_=document.querySelector("#inputRole"),h=document.querySelector(n),m=document.querySelector(o),u=(document.querySelector(".elements__likesNumber"),document.querySelector(".profile__imageContainer")),d=document.querySelector(".profile__image");class p{constructor(e,t,s){let{ownerId:i,text:r,image:n,id:o,likesNum:l,handleCardClick:a,openDeleteConfirmPopUp:c,handleLikeNumber:_}=e;this._text=r,this._image=n,this._likesNum=l,this._templateSelector=t,this._handleCardClick=a,this._openDeleteConfirmPopUp=c,this._element=this._getTemplate(),this._imageItem=this._element.querySelector(".elements__image"),this._textItem=this._element.querySelector(".elements__text"),this._likeItem=this._element.querySelector(".elements__like-btn"),this._deleteItem=this._element.querySelector(".elements__delete-icon"),this._likeNumber=this._element.querySelector(".elements__likesNumber"),this._id=o,this._userId=s,this._ownerId=i,this._handleLikeNumber=_}_getTemplate(){return document.querySelector(this._templateSelector).content.querySelector(".elements__element").cloneNode(!0)}generateCard(){return this._imageItem.src=this._image,this._textItem.textContent=this._text,this._imageItem.alt="view of ".concat(this._text),this.setLikesNum(this._likesNum),this.setEventListeners(),this._userId!==this._ownerId&&this._deleteItem.setAttribute("style","display:none"),this._element}setLikesNum(e){this._likeNumber.textContent=e}setEventListeners(){this._imageItem.addEventListener("click",(()=>{this._handleCardClick()})),this._likeItem.addEventListener("click",(()=>{this._handleLikeToggle()})),this._deleteItem.addEventListener("click",(()=>{this.openDeleteConfirmPopUp()}))}openDeleteConfirmPopUp(){this._openDeleteConfirmPopUp(this._id)}deleteDomCard(){this._element.remove()}_handleLikeToggle(){this._likeItem.classList.toggle("elements__svg-heart_liked");const e=this._likeItem.classList.contains("elements__svg-heart_liked")?"addLike":"deleteLike";this._handleLikeNumber(this._id,e)}}const f=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}getInitialCards(){return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(e.statusText))).catch(console.log)}postNewCard(e,t){return fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})}).then((e=>e.ok?e.json():Promise.reject(e.statusText))).catch(console.log)}confirmDelete(e){return fetch("".concat(this._baseUrl,"/cards/").concat(e),{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(e.statusText))).catch(console.log)}deleteLike(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(e.statusText))).catch(console.log)}addLike(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"PUT",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(e.statusText))).catch(console.log)}getUserInfo(){return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(e.statusText))).catch(console.log)}editUserInfo(e){let{form__name:t,form__role:s}=e;fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:s})})}editAvatarImage(e){fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})})}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"d117ca4c-01ef-4f19-abee-387b4e32e69d","Content-Type":"application/json"}}),b=new class{constructor(e,t){let{data:s,renderer:i}=e;this._container=document.querySelector(t),this._items=s,this._renderer=i}renderer(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({data:[],renderer:e=>{b.addItem(y(e))}},r),E=new i("#addImage",(function(){const e=E.getInputValues(),t=e.form__title,s=e.form__imageLink,i={};i.name=t,i.link=s,f.postNewCard(t,s).then((e=>{i.ownerId=e.owner._id,i._id=e._id,i.likes=e.likes,b.addItem(y(i))}))})),g=new i("#editProfileImage",(function(){const e=g.getInputValues().form__imageLink;f.editAvatarImage(e),d.src=e})),v=new i("#editProfile",(function(){const e=v.getInputValues();S.setUserInfo(e),f.editUserInfo(e)})),L=new class extends s{constructor(e){super(e),this._formPopupElement=this._popupElement.querySelector(".popup__form")}deleteAction(e){this._submitHandler=e}setEventListeners(){super.setEventListeners(),this._formPopupElement.addEventListener("submit",(e=>{e.preventDefault(),this._submitHandler(),this.close()}))}close(){super.close()}}("#confirmDelete"),k=new class extends s{constructor(e){var t,s;super(e),s=(e,t)=>{this._imageFile.src=e,this._imageText.textContent=t,this._imageFile.alt="view of ".concat(t),super.open()},(t="open")in this?Object.defineProperty(this,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):this.open=s,this._imageFile=this._popupElement.querySelector(".popup__imagePopUp"),this._imageText=this._popupElement.querySelector(".popup__imagePopUp-text")}}("#imagePopUp"),S=new class{constructor(e){let{nameSelector:t,roleSelector:s}=e;this._nameSelector=t,this._roleSelector=s,this._profileName=document.querySelector(this._nameSelector),this._profileRole=document.querySelector(this._roleSelector)}getUserInfo(){const e={};return e.name=this._profileName.textContent,e.role=this._profileRole.textContent,e}setUserInfo(e){this._profileName.textContent=e.form__name,this._profileRole.textContent=e.form__role}}({nameSelector:n,roleSelector:o}),I={};var C;C={inputSelector:".popup__form-input",submitButtonSelector:".popup__form-submit-btn",inactiveButtonClass:"popup__form-submit-btn_inactive",inputErrorClass:"popup__form-errorMsg",errorClass:"popup__form-errorMsg_active",formSelector:".popup__form"},Array.from(document.querySelectorAll(C.formSelector)).forEach((e=>{const s=new t(C,e),i=e.getAttribute("name");I[i]=s,s.enableValidation()})),v.setEventListeners(),E.setEventListeners(),g.setEventListeners(),L.setEventListeners();const y=e=>{const t=e.ownerId?e.ownerId:e.owner._id,s=e.name,i=e.link;let r=e.likes.length;const n=e._id;k.setEventListeners();const o=new p({ownerId:t,text:s,image:i,id:n,likesNum:r,handleCardClick:()=>{(e=>{e.open(i,s)})(k)},openDeleteConfirmPopUp:e=>{L.open(),L.deleteAction((()=>{f.confirmDelete(e).then((e=>{o.deleteDomCard()}))}))},handleLikeNumber:(e,t)=>{"addLike"===t?f.addLike(e).then(r+=1):(f.deleteLike(e).then((e=>e)),r>0&&(r-=1)),o.setLikesNum(r)}},"#card-template",x);return o.generateCard()};let x;Promise.all([f.getUserInfo(),f.getInitialCards()]).then((e=>{let[t,s]=e;x=t._id,Array.from(s).forEach((e=>{b.addItem(y(e))})),h.textContent=t.name,m.textContent=t.about})),l.addEventListener("click",(()=>{f.getUserInfo().then((e=>{c.setAttribute("value",e.name),_.setAttribute("value",e.about)})),I.edit__form.resetValidation(),v.open()})),a.addEventListener("click",(()=>{I.add__form.resetValidation(),E.open()})),u.addEventListener("click",(()=>{I.editProfileImage__form.resetValidation(),g.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,